**************************************
 WhatToCode.txt, Phase 2, CpE/CSc 159
**************************************

*1. "Mute" SystemProc() and TimerHandler():
   take out their cons_printf()

*2. Additions in types.h:
   SYSCALL_EVENT 128
   WRITE 4 
   GETPID 100
   SLEEP 101
   STDOUT 1
   pcb_t: int wake_time
   state_t: SLEEPING
   proc_frame_t:
      break up PUSHA[8] into
      FOUR[4], EBX, EDX, ECX, EAX
      insert a new event_type between EAX and EIP
      all "unsigned int" type

*3. unsigned int timer_ticks:
   created in main.c, prototyped in data.h: 
   initialized to 0 during the bootstrap,
   incremented by 1 in the timer handler code

*4. events.S (prototypes in events.h):
   TimerEvent pushes event type #32 and jump to TestRest
   SyscallEvent pushes event type #128 and jump to TestRest
   TheRest is the code of the original TimerEvent
      ENTRY(ProcLoader)
        movl 4(%esp), %eax
        movl %eax, %esp
        addl $4, %esp // skip event_type 4 bytes
        popa
        iret

?5. During the bootstrap:
   fill out the new IDT entries with the new event code address
   
6. Use the new proc.c (proc.h unchanged). New syscalls.c and         
   syscalls.h are to be included. Add Write() and Sleep() code.

*7. Kernel():
   call TimerHandler only when the event_type indicates
   call one of the three new handlers according to the
   EAX value in the process frame when the event_type
   indicates it's a syscall.

8. Add new code to handlers.c (prototypes in handlers.h):
   void GetPidHandler(void):
      fill out the register value in the process frame of the
      calling process (syscall GetPid() will subsequently pull
      it out to return to the calling process code)

   void WriteHandler(proc_frame_t p):
      (syscall Write() has placed into 2 CPU registers: the
      I/O buffer to print to, and the address of the string)
      if the buffer requested is STDOUT, issue a cons_printf()
      here using the string address

      e.g., where's the process frame?
      char *str;
      p->EBX, ECX
      if(p->EBX == STDOUT) {
         str = (char *)p->ECX;
         MyPrint(str);

   void SleepHandler(void):
      (syscall Sleep() has placed the sleep time in a CPU register)
      calculate the wake time by the current time plus the sleep time
      (both in terms of timer-event counts), and place it into the
      PCB of the calling process, alter its state, reset the running PID

      e.g., pcb[run_pid].wake_time = timer_tick + 100 * seconds2sleep;
      seconds2sleep in p->EBX
      change state of run_pid to SLEEPING
      run_pid = -1

   update TimerHandler() code:
      upcount the system time counter (timer_ticks++)
      loop thru the PCB array looking for any:
         SLEEPING processes that are scheduled to wake
         (when found) enqueue its PID to the run queue and alter its state
      (followed by the rest of the original code of the handler)

